generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Evidence {
  id            Int       @id @default(autoincrement())
  marketId      String
  type          String
  title         String
  url           String?
  description   String
  netVotes      Int       @default(0)
  createdAt     DateTime  @default(now())
  walletAddress String
  comments      Comment[]
  votes         Vote[]

  @@index([marketId])
  @@index([marketId, type])
}

model OddsHistory {
  id             Int      @id @default(autoincrement())
  marketId       String
  yesProbability Float
  noProbability  Float
  timestamp      DateTime @default(now())

  @@index([marketId])
  @@index([marketId, timestamp])
}

model Vote {
  id            Int      @id @default(autoincrement())
  evidenceId    Int
  marketId      String
  walletAddress String
  voteWeight    Int      @default(1)
  createdAt     DateTime @default(now())
  evidence      Evidence @relation(fields: [evidenceId], references: [id], onDelete: Cascade)

  @@unique([evidenceId, walletAddress])
  @@index([marketId])
  @@index([walletAddress])
}

model UserMarketPosition {
  id            Int      @id @default(autoincrement())
  marketId      String
  walletAddress String
  yesShares     Int      @default(0)
  noShares      Int      @default(0)
  lastUpdated   DateTime @default(now())

  @@unique([marketId, walletAddress])
  @@index([marketId])
  @@index([walletAddress])
}

model Comment {
  id            Int           @id @default(autoincrement())
  evidenceId    Int
  marketId      String
  parentId      Int?
  walletAddress String
  content       String
  upvotes       Int           @default(0)
  downvotes     Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  evidence      Evidence      @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  parent        Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[]     @relation("CommentReplies")
  votes         CommentVote[]

  @@index([evidenceId])
  @@index([marketId])
  @@index([parentId])
  @@index([walletAddress])
}

model CommentVote {
  id            Int      @id @default(autoincrement())
  commentId     Int
  marketId      String
  walletAddress String
  voteType      String
  createdAt     DateTime @default(now())
  comment       Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, walletAddress])
  @@index([commentId])
  @@index([marketId])
  @@index([walletAddress])
}

model Trade {
  id            Int      @id @default(autoincrement())
  walletAddress String
  marketTitle   String
  marketId      String
  outcome       String
  shares        Float
  avgPrice      Float
  betAmount     Float
  toWin         Float
  status        String   @default("OPEN")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([marketId])
}

model UserPnLHistory {
  id            Int      @id @default(autoincrement())
  walletAddress String
  pnl           Float
  timestamp     DateTime @default(now())

  @@index([walletAddress])
  @@index([timestamp])
}

model MarketIdea {
  id            Int              @id @default(autoincrement())
  title         String
  description   String
  rules         String
  netVotes      Int              @default(0)
  walletAddress String
  status        String           @default("pending")
  createdAt     DateTime         @default(now())
  votes         MarketIdeaVote[]

  @@index([walletAddress])
  @@index([status])
}

model MarketIdeaVote {
  id            Int        @id @default(autoincrement())
  ideaId        Int
  walletAddress String
  voteWeight    Int        @default(1)
  createdAt     DateTime   @default(now())
  marketIdea    MarketIdea @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@unique([ideaId, walletAddress])
  @@index([ideaId])
  @@index([walletAddress])
}

model UserDeposits {
  id              Int      @id @default(autoincrement())
  walletAddress   String
  amount          Float
  transactionHash String?
  createdAt       DateTime @default(now())

  @@index([walletAddress])
  @@index([createdAt])
}

model ProcessedSession {
  id             Int       @id @default(autoincrement())
  sessionId      String    @unique
  nashAmount     String
  customerWallet String
  purchaseAmount String
  status         String    @default("pending")
  mintedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([sessionId])
  @@index([customerWallet])
  @@index([status])
  @@index([createdAt])
}

model AutoDeposit {
  id              Int      @id @default(autoincrement())
  walletAddress   String   @unique
  amount          String
  transactionHash String?
  createdAt       DateTime @default(now())

  @@index([walletAddress])
  @@index([createdAt])
}

// Stores survey responses; each question as a column with concatenated string answers
model SurveyResponse {
  id            Int       @id @default(autoincrement())
  name          String?
  sessionId     String?
  walletAddress String?
  
  // Each question as a single column storing concatenated answers
  userType                    String? // Question 1: User type selections
  topicsOfInterest            String? // Question 2: Topic selections
  otherTopics                 String? // Question 2: Additional topics text
  expertCommission            String? // Question 3: Yes/No
  marketResolutionMethod      String? // Question 4: Resolution method selections
  inconclusiveEvidenceHandling String? // Question 5: Inconclusive evidence selections
  viewEvidenceBeforeBetting   String? // Question 6: Yes/No
  contributeToInformation     String? // Question 7: Yes/No
  trustEvidenceRating         String? // Question 8: 1-10 rating
  televisedTrialInterest      String? // Question 9: Yes/No
  expertReportPreference      String? // Question 10: Yes/No
  expertClassPreference       String? // Question 11: Expert class selections
  additionalComments          String? // Open-ended comments
  
  // Metadata
  userAgent                   String?
  ipAddress                   String?
  createdAt                   DateTime @default(now())

  @@index([createdAt])
  @@index([walletAddress])
}
